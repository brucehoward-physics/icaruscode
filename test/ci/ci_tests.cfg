################################################################################
###  ICARUS Continuous Integration test configuration
################################################################################
###
### TODO list:
### * when I get a valid certificate proxy:
###   * calibrate all the tests
### * if analysis tree jobs are available:
###   * update the test suites (quick and seq, single and nucosmics) to include them
###   * update the documentation at [0.1]
###   * calibrate the four tests
###
###
################################################################################
#  Table of contents
######################
#
#  [0] introduction (documentation)
#   [.1] definitions
#   [.2] overview of the test suites
#   [.3] calibration of the expected resource usage ranges
#  [1] common definitions (`DEFAULT` section)
#  [2] single particle tests
#   [.1] quick tests
#   [.2] sequential tests
#  [3] data-like events: neutrino and cosmic background tests
#   [.1] quick tests
#   [.2] sequential tests
#  [4] gallery tests
#  [A] special suite definitions for continuous integration framework (`lar_ci`)
#
################################################################################
#  [0] Introduction
#####################
#
# Many tests execute the same test driver script (`EXPSCRIPT_ICARUSCODE`) with
# different command line arguments.
# The script is currently just delegating the task to a template script provided
# by lar_ci UPS product.
# 
# For a lengthy explanation of why the script path is not specified in
# EXPSCRIPT_ICARUSCODE, see test/ci/CMakeFiles.txt. What is relevant here is that
# this should allow the execution of the integration tests from command line on
# both development and running environment.
# Reminder: to get the list of tests, run:
#     
#     test_runner -l
#     
#  *** INTEGRATION TESTS REQUIRE A CERTIFICATE PROXY TO ALLOW dCache ACCESS ***
# 
# The convention here is that lower case variables are special variables that
# are used by the C.I. system (usually, the test_runner script), while the
# upper case variables are our own. Note that these variable names should be
# marked with a ICARUS tag not to conflict with others from the additional tests
# that are queued together with these ones.
# 
# 
# The files needed for the tests are kept in dCache and, unless the test
# description specifies otherwise, they are accessed via XRootD.
# The chosen pattern is that:
# - the same files work both as input for a stage of a sequential test, and as a
#   reference for the previous stage in the sequence (in this configuration, the
#   two concepts are kept separate)
# - the storage is structures in subdirectories of "reference":
#   * the first level contains a build identifier that may distinguish between
#     tests (the one used for the most standard tests is called... "standard"!);
#   * the second level contains a label of the test, as the "stage";
#   * the content is different files for different test runs and different
#     test suites.
#
################
#  [0.1] Definitions
# ====================
# 
# Workflows:
# * basic 4-stage simulation workflow:
#   1. generation (`gen`), test-dependent
#   2. propagation through detector (`g4`) based on `standard_g4_icarus.fcl`
#   3. digitisation (`detsim`) based on `multitpc_detsim_icarus.fcl`
#   4. reconstruction (`reco`) based on
#      `reco_icarus_driver_reco_multitpc_gauss.fcl`
#   5. flattened analysis format (`anatree`) is currently not supported
# * short workflows: like the normal workflows, but without the flattened
#     analysis format stage (no `anatree`)
# 
# Types:
# * sequential: input for the first stage is an empty file, the next stages
#     use as input the output of the previous stage;
# * independent: input for the first stage is the same as in the sequential
#     test, the next stages use as input reference files produced from the
#     previous stage in the sequential test; these tests can be run in parallel;
# * "quick": are usually test of "independent" type with a low number of events;
#     quick tests are recommended to be kept under 3 minutes run-time (wall
#     clock) each, not to challenge the endurance of the impatient tester.
# 
#
################
#  [0.2] Overview of the test suites
# ====================================
# 
# Test suites:
# * single particle simulation tests (variable tag: `SINGLE_ICARUSCODE`),
#   basic 5-stage simulation workflow, based on `prod_muon_workshop.fcl`
#   * `single_quick_test_icaruscode`: (type: independent) test with few events
#   * `single_seq_test_icaruscode`: (type: sequential) test with more events
#        than quick
# * data-like simulation tests (variable tag: `NUCOSMICS_ICARUSCODE`),
#   basic 5-stage simulation workflow, with a neutrino event and cosmic ray
#   background
#   * `nucosmics_quick_test_icaruscode`: (type: independent) test with few events
#   * `nucosmics_seq_test_icaruscode`: (type: sequential) test with more events
#        than quick
# 
# * `develop_test_icaruscode`: recommended to be run by developers before pushing,
#      when modifying sources of little consequence
# * `complete_test_icaruscode`: recommended to be run by developers before pushing
#      changes that may be suspected of having a widespread effect
# * `generate_reference_icaruscode`: special suite generating *all* the reference
#      files
# * `all_tests_icaruscode`: all tests; mostly for maintenance and debugging
# 
#
################
#  [0.3] Calibration of the expected resource usage ranges
# =========================================================
# 
# The configuration elements `cpu_usage_range` and `mem_usage_range` for each
# test will need to be calibrated:
# # run `test_runner` once with the `--verbose` option
# # check that it succeeded!
# # use the VAX-GMIP figure "kVs" as a reference to set `cpu_usage_range`
# # use the "kb" figure as reference to set `mem_usage_range`
# 
# Allow a good margin for both ranges.
#
#
################################################################################
#  [1] Common definitions
################################################################################
# 
# The configuration values should have a `ICARUSCODE` tag in their key not to be
# casually overridden when other configurations (from other experiments) are
# pulled in. The test execution environment can be promiscuous!
# 
# NOTE: the value of these configuration elements can be overridden in the
#       individual test sections; substitution of the placeholders in their
#       value will happen *after* the override took place; for example:
#           
#           Path=/pnfs/icarus/persistent/ContinuousIntegration
#           File=%(Path)s/Empty.root
#           Path=/icarus/data/ContinuousIntegration
#           
#       will result into `File=/icarus/data/ContinuousIntegration/Empty.root`.
#       
# 

[DEFAULT]
# this is the tag we append to the ICARUS-specific test configuration variable names
# (e.g. "TESTMASK_ICARUSCODE"); it is used by the C.I. system
CI_EXP_CODE=ICARUSCODE

# the number of events to process in the sequential tests;
# remember that this ends up being the number of events in the reference files
# for the quick tests too, so pick it large enough to cover all the events in those tests
NEVENTS_SEQ_SINGLE_ICARUSCODE=5
NEVENTS_SEQ_NUCOSMICS_ICARUSCODE=5
NEVENTS_SEQ_INTIMECOSMIC_GEN_ICARUSCODE=250
NEVENTS_SEQ_INTIMECOSMIC_ICARUSCODE=3

# enable running the test jobs, the product presence check and the check of their size
RUN_TEST_ICARUSCODE=1
CHECK_PRODUCTS_ICARUSCODE=1
CHECK_PRODUCT_SIZE_ICARUSCODE=1

# this prefix is common to all FHiCL configuration files of ICARUS C.I. tests
CI_FHICL_PREFIX_ICARUSCODE=icarus_ci_

# file paths:
# - relative path defining the location of all ICARUS integration test data
BASEFILERELPATH_ICARUSCODE=icarus/persistent/stash/ContinuousIntegration
# - absolute path with direct POSIX access to dCache
BASEFILEDIR_ICARUSCODE=/pnfs/%(BASEFILERELPATH_ICARUSCODE)s
# - absolute path with XRootD access to dCache
# - use XRootD port 1095 that allows unauthenticated XRootD access
XROOTD_BASEFILEDIR_ICARUSCODE=xroot://fndca1.fnal.gov:1095/pnfs/fnal.gov/usr/%(BASEFILERELPATH_ICARUSCODE)s
# - the subdirectory hosting the selected input and reference, and the full paths (both POSIX and XRootD)
# NOTE: the configuration value 'INPUTFILEDIR_ICARUSCODE' is also used in the C.I. test workflow:
#       its name must not be changed!
INPUTFILEDIR_ICARUSCODE=%(BASEFILEDIR_ICARUSCODE)s/reference
XROOTD_INPUTFILEDIR_ICARUSCODE=%(XROOTD_BASEFILEDIR_ICARUSCODE)s/reference
REFERENCEFILEDIR_ICARUSCODE=%(BASEFILEDIR_ICARUSCODE)s/reference
XROOTD_REFERENCEFILEDIR_ICARUSCODE=%(XROOTD_BASEFILEDIR_ICARUSCODE)s/reference

# extra layer of directory for specific tests:
SINGLE_INPUT_DIRNAME_ICARUSCODE=standard
NUCOSMICS_INPUT_DIRNAME_ICARUSCODE=standard

# the test mask collects check requests in a single string
TESTMASK_ICARUSCODE=%(RUN_TEST_ICARUSCODE)s%(CHECK_PRODUCTS_ICARUSCODE)s%(CHECK_PRODUCT_SIZE_ICARUSCODE)s

# this is the script we use for most of the tests
# (lookup in `PATH` environment variable directories; provided by `lar_ci`)
EXPSCRIPT_ICARUSCODE=ci_regression_test_template.sh

# arguments used by EXPSCRIPT_ICARUSCODE
BASE_STDARGS_ICARUSCODE=--executable lar --nevents %(NEVENTS)s --stage-name %(STAGE_NAME)s --fhicl %(FHiCL_FILE)s --testmask %(TESTMASK_ICARUSCODE)s
STDARGS_NOOUTPUT_ICARUSCODE=%(BASE_STDARGS_ICARUSCODE)s
STDARGS_ICARUSCODE=%(BASE_STDARGS_ICARUSCODE)s --outputs %(OUTPUT_STREAM)s

# build_identifier and build_platform are passed by the C.I. system
IDENTIFIER_ICARUSCODE=${build_identifier}
# these string is used by the C.I. system to concoct the name of a reference file
# from the name of the output file; that means this tag MUST be in the output
# file name, or else the reference file will have the same name as the current
# output (which causes havoc).
# Also, use these only for the output art ROOT file, since the variable
# substitution (from IDENTIFIER_ICARUSCODE) is not correctly handled in the
# `output#` directives.
REF_ICARUSCODE=Reference%(IDENTIFIER_ICARUSCODE)s
CUR_ICARUSCODE=Current%(IDENTIFIER_ICARUSCODE)s


################################################################################
#  [2] Single particle tests
##############################
#
# These tests ultimately utilise a simulated event from
# `prod_muon_workshop.fcl`, which generates a muon.
# 
# The workflows are the "standard" one with basic reconstruction
# (see section [0.1]).
# 
# The workflow initiates from an original input file with empty events, that
# with NuRandomService set on `perEvent` policy should guarantee "perfect"
# reproducibility. The blocks are complicate enough (explanations are in wiki at
# https://cdcvs.fnal.gov/redmine/projects/lar-ci/wiki/Test_Runner_Introduction )
# and they are designed so that a new stage can be added by copying a block
# into a new one and changing:
# - the test name in brackets (of course!)
# - the `STAGE_NAME` and `INPUT_STAGE_NAME` variables
# - `cpu_usage_range` and `mem_usage_range` will need to be calibrated too
#   (run `test_runner` once with the `--verbose` option, check that it
#   succeeded, and use the VAX-GMIP figure "kVs" as a reference to set
#   `cpu_usage_range`, and the "kb" figure as reference to set
#   `mem_usage_range`)
#
# The configuration of the command line overrides the `TFileService` output file
# name (`--TFileName` option) to conform to a simple pattern, as it is also
# internally done by the test script for the art ROOT output file (from
# `RootOutput` module).
# 
#
#  [2.1] Single particle tests: quick tests
# ===========================================
#
# These tests are of "quick" type.
# 
# The input files are reference files from the corresponding sequential test
# (`single_XXX_seq_test_icaruscode`), except for the generator stage, where the
# input file is the same as in the sequential test.
#

[test single_gen_quick_test_icaruscode]
STAGE_NAME=gen
NEVENTS=5
# calibrated with [e20] on icarusbuild02.fnal.gov on 20210607
cpu_usage_range=5:50
mem_usage_range=100000:400000

script=%(EXPSCRIPT_ICARUSCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)ssingle_%(STAGE_NAME)s_quick_test_icaruscode.fcl
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=%(XROOTD_BASEFILEDIR_ICARUSCODE)s/input/empty/EmptyEvents_01.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test single_g4_quick_test_icaruscode]
STAGE_NAME=g4
INPUT_STAGE_NAME=gen
NEVENTS=2
# calibrated with [e20] on Jenkins on 20220103
cpu_usage_range=750:1200
mem_usage_range=2800000:5000000

script=%(EXPSCRIPT_ICARUSCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)ssingle_%(STAGE_NAME)s_quick_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test single_detsim_quick_test_icaruscode]
STAGE_NAME=detsim
INPUT_STAGE_NAME=g4
NEVENTS=2
# calibrated with [e20] on Jenkins on 20211217
cpu_usage_range=450:900
mem_usage_range=2100000:5000000

script=%(EXPSCRIPT_ICARUSCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)ssingle_%(STAGE_NAME)s_quick_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test single_reco_quick_test_icaruscode]
STAGE_NAME=reco
INPUT_STAGE_NAME=detsim
NEVENTS=2
# calibrated with [e20] on Jenkins on 20211217
cpu_usage_range=1450:2900
mem_usage_range=3000000:3800000

script=%(EXPSCRIPT_ICARUSCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)ssingle_%(STAGE_NAME)s_quick_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test single_reco0_quick_test_icaruscode]
STAGE_NAME=reco0
INPUT_STAGE_NAME=detsim
NEVENTS=2
# calibrated with [e20] on icarusbuild02.fnal.gov 20211217
cpu_usage_range=1650:3250
mem_usage_range=4000000:5000000

script=%(EXPSCRIPT_ICARUSCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)ssingle_%(STAGE_NAME)s_quick_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root 
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s

[test single_reco1_quick_test_icaruscode]
STAGE_NAME=reco1
INPUT_STAGE_NAME=reco0
NEVENTS=2
# calibrated with [e20] on Jenkins 20220103
cpu_usage_range=100:550
mem_usage_range=2200000:3500000

script=%(EXPSCRIPT_ICARUSCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)ssingle_%(STAGE_NAME)s_quick_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s

[test single_anatree_quick_test_icaruscode]
# no reference art ROOT output for this one, but we have analysis tree reference (the "--extra-function" option)
# (we use the reference file from sequence explicitly here)
# 
# TODO comparisons with references should happen in a different way, with the "C.I. validation tests" (ask the C.I. crew!)
# 
STAGE_NAME=anatree
INPUT_STAGE_NAME=reco1
NEVENTS=2
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=10:100
mem_usage_range=200000:600000

script=%(EXPSCRIPT_ICARUSCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)ssingle_%(STAGE_NAME)s_quick_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
# disable the first actual product test; seeing this, the C.I. will disable also all the following ones;
# note that the INI parsing makes sure that this chacge is "backward propagated" to the value of TESTMASK_ICARUSCODE for this test
CHECK_PRODUCTS_ICARUSCODE=0
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_NOOUTPUT_ICARUSCODE)s --input-file %(INPUT_STREAM)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s



[suite single_quick_test_icaruscode]
# TODO analysis trees not included at this time
# testlist=single_gen_quick_test_icaruscode single_g4_quick_test_icaruscode single_detsim_quick_test_icaruscode single_reco_quick_test_icaruscode single_anatree_quick_test_icaruscode
testlist=single_gen_quick_test_icaruscode single_g4_quick_test_icaruscode single_detsim_quick_test_icaruscode single_reco0_quick_test_icaruscode single_reco1_quick_test_icaruscode



##############################
#  [2.2] Single particle tests: sequential tests
# ================================================
#
# This test simulates a full "standard" simulation + reconstruction chain.
# Due to its sequential nature, this test is expected to be the longest.
# It is recommended that the whole test be kept under 10 minutes run-time
# (wall clock), 3 minutes or less recommended, not to challenge the endurance
# of the impatient tester.
# 
# The resource usage upper limit has a marker feature (upper limit ending with
# `2`) just to facilitate the connection between the messages of `test_runner`
# on resource usage excess with the test that causes it (it's clearer to run it
# with `-s` option though).
#

[test single_gen_seq_test_icaruscode]
STAGE_NAME=gen
NEVENTS=%(NEVENTS_SEQ_SINGLE_ICARUSCODE)s
# calibrated with [e20] on icarusbuild02.fnal.gov on 20210607
cpu_usage_range=5:52
mem_usage_range=100000:400002

script=%(EXPSCRIPT_ICARUSCODE)s

FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)ssingle_%(STAGE_NAME)s_seq_test_icaruscode.fcl
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=%(XROOTD_BASEFILEDIR_ICARUSCODE)s/input/empty/EmptyEvents_01.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test single_g4_seq_test_icaruscode]
STAGE_NAME=g4
INPUT_STAGE_NAME=gen
NEVENTS=%(NEVENTS_SEQ_SINGLE_ICARUSCODE)s
# calibrated with [e20] on icarusbuild02.fnal.gov on 20210607: +500 MB memory requirement!
# 2 GB is tight, but we want to be aware when that threshold is passed
cpu_usage_range=330:602
mem_usage_range=1500000:2500002

script=%(EXPSCRIPT_ICARUSCODE)s
requires=single_%(INPUT_STAGE_NAME)s_seq_test_icaruscode
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)ssingle_%(STAGE_NAME)s_seq_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test single_detsim_seq_test_icaruscode]
STAGE_NAME=detsim
INPUT_STAGE_NAME=g4
NEVENTS=%(NEVENTS_SEQ_SINGLE_ICARUSCODE)s
# calibrated with [e20] on icarusbuild02.fnal.gov on 20210607: +200 MB memory requirement!
cpu_usage_range=80:302
mem_usage_range=200000:1000002

script=%(EXPSCRIPT_ICARUSCODE)s
requires=single_%(INPUT_STAGE_NAME)s_seq_test_icaruscode
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)ssingle_%(STAGE_NAME)s_seq_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test single_reco_seq_test_icaruscode]
STAGE_NAME=reco
INPUT_STAGE_NAME=detsim
NEVENTS=%(NEVENTS_SEQ_SINGLE_ICARUSCODE)s
# calibrated with [e20] on icarusbuild02.fnal.gov on 20210607: 800 MB -> 3.8 GB!!!
cpu_usage_range=100:402
mem_usage_range=700000:1200002

script=%(EXPSCRIPT_ICARUSCODE)s
requires=single_%(INPUT_STAGE_NAME)s_seq_test_icaruscode
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)ssingle_%(STAGE_NAME)s_seq_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s

[test single_reco0_seq_test_icaruscode]
STAGE_NAME=reco0
INPUT_STAGE_NAME=detsim
NEVENTS=%(NEVENTS_SEQ_SINGLE_ICARUSCODE)s
# calibrated with [e20] on icarusbuild02.fnal.gov 20210818
cpu_usage_range=100:405
mem_usage_range=700000:1200005

script=%(EXPSCRIPT_ICARUSCODE)s
requires=single_%(INPUT_STAGE_NAME)s_seq_test_icaruscode
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)ssingle_%(STAGE_NAME)s_seq_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root 
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s

[test single_reco1_seq_test_icaruscode]
STAGE_NAME=reco1
INPUT_STAGE_NAME=reco0
NEVENTS=%(NEVENTS_SEQ_SINGLE_ICARUSCODE)s
# calibrated with [e20] on icarusbuild02.fnal.gov 20210818
cpu_usage_range=100:405
mem_usage_range=700000:1200005

script=%(EXPSCRIPT_ICARUSCODE)s
requires=single_%(INPUT_STAGE_NAME)s_seq_test_icaruscode
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)ssingle_%(STAGE_NAME)s_seq_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test single_anatree_seq_test_icaruscode]
# no reference art ROOT output for this one, but we have analysis tree reference (the "--extra-function" option)
# 
# See the comment on the quick test for the validation.
# 
STAGE_NAME=anatree
INPUT_STAGE_NAME=reco1
NEVENTS=%(NEVENTS_SEQ_SINGLE_ICARUSCODE)s
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=10:102
mem_usage_range=200000:600002

script=%(EXPSCRIPT_ICARUSCODE)s
requires=single_%(INPUT_STAGE_NAME)s_seq_test_icaruscode
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)ssingle_%(STAGE_NAME)s_seq_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=single_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=single_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
CHECK_PRODUCTS_ICARUSCODE=0 ; see single_anatree_quick_test_icaruscode
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_NOOUTPUT_ICARUSCODE)s --input-file %(INPUT_STREAM)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s



[suite single_seq_test_icaruscode]
# TODO analysis trees not included at this time
# testlist=single_gen_seq_test_icaruscode single_g4_seq_test_icaruscode single_detsim_seq_test_icaruscode single_reco_seq_test_icaruscode single_anatree_seq_test_icaruscode
testlist=single_gen_seq_test_icaruscode single_g4_seq_test_icaruscode single_detsim_seq_test_icaruscode single_reco0_seq_test_icaruscode single_reco1_seq_test_icaruscode

[suite generate_reference_single_test_icaruscode]
testlist=single_gen_seq_test_icaruscode single_g4_seq_test_icaruscode single_detsim_seq_test_icaruscode single_reco0_seq_test_icaruscode single_reco1_seq_test_icaruscode



################################################################################
#  [3] Data-like events: neutrino and cosmic background tests
###############################################################
#
# This test simulates a "standard" simulation + reconstruction chain
# on a generated event with a neutrino interaction (GENIE) and cosmic ray
# background (Corsika).
# 
# 
#  [3.1] Data-like events: quick tests
# ===========================================
# 
# These tests are of "quick" type.
# 
# The resource usage upper limit has a marker feature (upper limit ending with
# `3`) just to facilitate the connection between the messages of `test_runner`
# on resource usage excess with the test that causes it (it's clearer to run it
# with `-s` option though).
#

[test nucosmics_gen_quick_test_icaruscode]
STAGE_NAME=gen
NEVENTS=5
# calibrated with [e20] on icarusbuild02.fnal.gov on 20211217
cpu_usage_range=300:753
mem_usage_range=1800000:3500003

script=%(EXPSCRIPT_ICARUSCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)snucosmics_%(STAGE_NAME)s_quick_test_icaruscode.fcl
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=%(XROOTD_BASEFILEDIR_ICARUSCODE)s/input/empty/EmptyEvents_02.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test nucosmics_g4_quick_test_icaruscode]
STAGE_NAME=g4
INPUT_STAGE_NAME=gen
NEVENTS=2
# calibrated with [e20] on Jenkins on 20210810
cpu_usage_range=3000:5003
mem_usage_range=5000000:9000003

script=%(EXPSCRIPT_ICARUSCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)snucosmics_%(STAGE_NAME)s_quick_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test nucosmics_detsim_quick_test_icaruscode]
STAGE_NAME=detsim
INPUT_STAGE_NAME=g4
NEVENTS=2
# calibrated with [e20] on Jenkins on 20210810
cpu_usage_range=1000:1803
mem_usage_range=6000000:12000003

script=%(EXPSCRIPT_ICARUSCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)snucosmics_%(STAGE_NAME)s_quick_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test nucosmics_reco_quick_test_icaruscode]
STAGE_NAME=reco
INPUT_STAGE_NAME=detsim
NEVENTS=2
# calibrated with [e20] on Jenkins on 20210810
cpu_usage_range=900:2403
mem_usage_range=4500000:7500003

script=%(EXPSCRIPT_ICARUSCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)snucosmics_%(STAGE_NAME)s_quick_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s

[test nucosmics_reco0_quick_test_icaruscode]
STAGE_NAME=reco0
INPUT_STAGE_NAME=detsim
NEVENTS=2
# calibrated with [e20] on icarusbuild02.fnal.gov 20211217
cpu_usage_range=1900:4403
mem_usage_range=6500000:10650003

script=%(EXPSCRIPT_ICARUSCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)snucosmics_%(STAGE_NAME)s_quick_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s

[test nucosmics_reco1_quick_test_icaruscode]
STAGE_NAME=reco1
INPUT_STAGE_NAME=reco0
NEVENTS=2
# calibrated with [e20] on icarusbuild02.fnal.gov 20211217
cpu_usage_range=1900:4403
mem_usage_range=6500000:12000003

script=%(EXPSCRIPT_ICARUSCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)snucosmics_%(STAGE_NAME)s_quick_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test nucosmics_anatree_quick_test_icaruscode]
# no reference art ROOT output for this one, but we have analysis tree reference (the "--extra-function" option)
# (we use the reference file from sequence explicitly here)
# 
# TODO comparisons with references should happen in a different way, with the "C.I. validation tests" (ask the C.I. crew!)
# 
STAGE_NAME=anatree
INPUT_STAGE_NAME=reco1
NEVENTS=2
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=100:403
mem_usage_range=800000:1400003

script=%(EXPSCRIPT_ICARUSCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)snucosmics_%(STAGE_NAME)s_quick_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
# disable the first actual product test; seeing this, the C.I. will disable also all the following ones;
# note that the INI parsing makes sure that this change is "backward propagated" to the value of TESTMASK_ICARUSCODE for this test
CHECK_PRODUCTS_ICARUSCODE=0
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_NOOUTPUT_ICARUSCODE)s --input-file %(INPUT_STREAM)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s



[suite nucosmics_quick_test_icaruscode]
# TODO analysis trees not included at this time
# testlist=nucosmics_gen_quick_test_icaruscode nucosmics_g4_quick_test_icaruscode nucosmics_detsim_quick_test_icaruscode nucosmics_reco_quick_test_icaruscode nucosmics_anatree_quick_test_icaruscode
testlist=nucosmics_gen_quick_test_icaruscode nucosmics_g4_quick_test_icaruscode nucosmics_detsim_quick_test_icaruscode nucosmics_reco0_quick_test_icaruscode nucosmics_reco1_quick_test_icaruscode



###############################################################
#  [3.2] Data-like events: sequence tests
# =========================================
#
# This test simulates a full "standard" simulation + reconstruction chain.
# Due to its sequential nature, this test is expected to be the longest.
# It is recommended that the whole test be kept under 10 minutes run-time
# (wall clock), 3 minutes or less recommended, not to challenge the endurance
# of the impatient tester.
# 
# The resource usage upper limit has a marker feature (upper limit ending with
# `4`) just to facilitate the connection between the messages of `test_runner`
# on resource usage excess with the test that causes it (it's clearer to run it
# with `-s` option though).
#

[test nucosmics_gen_seq_test_icaruscode]
STAGE_NAME=gen
NEVENTS=%(NEVENTS_SEQ_NUCOSMICS_ICARUSCODE)s
# calibrated with [e20] on icarusbuild02.fnal.gov on 20210607
cpu_usage_range=200:504
mem_usage_range=500000:1500004

script=%(EXPSCRIPT_ICARUSCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)snucosmics_%(STAGE_NAME)s_seq_test_icaruscode.fcl
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=%(XROOTD_BASEFILEDIR_ICARUSCODE)s/input/empty/EmptyEvents_01.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test nucosmics_g4_seq_test_icaruscode]
STAGE_NAME=g4
INPUT_STAGE_NAME=gen
NEVENTS=%(NEVENTS_SEQ_NUCOSMICS_ICARUSCODE)s
# calibrated with [e20] on icarusbuild02.fnal.gov on 20210607
cpu_usage_range=3000:5004
mem_usage_range=6000000:10000004

script=%(EXPSCRIPT_ICARUSCODE)s
requires=nucosmics_%(INPUT_STAGE_NAME)s_seq_test_icaruscode
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)snucosmics_%(STAGE_NAME)s_seq_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test nucosmics_detsim_seq_test_icaruscode]
STAGE_NAME=detsim
INPUT_STAGE_NAME=g4
NEVENTS=%(NEVENTS_SEQ_NUCOSMICS_ICARUSCODE)s
# calibrated with [e19] on icarusbuild02.fnal.gov on 20200921
# calibrated with [e20] on icarusbuild02.fnal.gov on 20210607: -1 GB memory
cpu_usage_range=1000:1604
mem_usage_range=4000000:6000004

script=%(EXPSCRIPT_ICARUSCODE)s
requires=nucosmics_%(INPUT_STAGE_NAME)s_seq_test_icaruscode
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)snucosmics_%(STAGE_NAME)s_seq_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test nucosmics_reco_seq_test_icaruscode]
STAGE_NAME=reco
INPUT_STAGE_NAME=detsim
NEVENTS=%(NEVENTS_SEQ_NUCOSMICS_ICARUSCODE)s
# calibrated with [e20] on icarusbuild02.fnal.gov on 20210610: -1000"
# again: 8 GB limit us tight, but it's an important threshold for grid jobs
cpu_usage_range=3000:6504
mem_usage_range=5000000:8000004

script=%(EXPSCRIPT_ICARUSCODE)s
requires=nucosmics_%(INPUT_STAGE_NAME)s_seq_test_icaruscode
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)snucosmics_%(STAGE_NAME)s_seq_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s

[test nucosmics_reco0_seq_test_icaruscode]
STAGE_NAME=reco0
INPUT_STAGE_NAME=detsim
NEVENTS=%(NEVENTS_SEQ_NUCOSMICS_ICARUSCODE)s

# calibrated with [e20] on icarusbuild02.fnal.gov 20210818

cpu_usage_range=3000:6504
mem_usage_range=5000000:8000004

script=%(EXPSCRIPT_ICARUSCODE)s
requires=nucosmics_%(INPUT_STAGE_NAME)s_seq_test_icaruscode
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)snucosmics_%(STAGE_NAME)s_seq_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root  
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s

[test nucosmics_reco1_seq_test_icaruscode]
STAGE_NAME=reco1
INPUT_STAGE_NAME=reco0
NEVENTS=%(NEVENTS_SEQ_NUCOSMICS_ICARUSCODE)s

# calibrated with [e20] on icarusbuild02.fnal.gov 20210818

cpu_usage_range=3000:6504
mem_usage_range=5000000:8000004

script=%(EXPSCRIPT_ICARUSCODE)s
requires=nucosmics_%(INPUT_STAGE_NAME)s_seq_test_icaruscode
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)snucosmics_%(STAGE_NAME)s_seq_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test nucosmics_anatree_seq_test_icaruscode]
# no reference art ROOT output for this one, but we have analysis tree reference (the "--extra-function" option)
# 
# See the comment on the quick test for the validation.
# 
STAGE_NAME=anatree
INPUT_STAGE_NAME=reco1
NEVENTS=%(NEVENTS_SEQ_NUCOSMICS_ICARUSCODE)s
# calibrated on sbndbuild01.fnal.gov on 20180305
cpu_usage_range=250:504
mem_usage_range=800000:1400004

script=%(EXPSCRIPT_ICARUSCODE)s
requires=nucosmics_%(INPUT_STAGE_NAME)s_seq_test_icaruscode
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)snucosmics_%(STAGE_NAME)s_seq_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=nucosmics_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=nucosmics_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(NUCOSMICS_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
CHECK_PRODUCTS_ICARUSCODE=0 ; see nucosmics_anatree_quick_test_icaruscode
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_NOOUTPUT_ICARUSCODE)s --input-file %(INPUT_STREAM)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s



[suite nucosmics_seq_test_icaruscode]
# TODO analysis trees not included at this time
# testlist=nucosmics_gen_seq_test_icaruscode nucosmics_g4_seq_test_icaruscode nucosmics_detsim_seq_test_icaruscode nucosmics_reco_seq_test_icaruscode nucosmics_anatree_seq_test_icaruscode
testlist=nucosmics_gen_seq_test_icaruscode nucosmics_g4_seq_test_icaruscode nucosmics_detsim_seq_test_icaruscode nucosmics_reco0_seq_test_icaruscode nucosmics_reco1_seq_test_icaruscode

[suite generate_reference_nucosmics_test_icaruscode]
testlist=nucosmics_gen_seq_test_icaruscode nucosmics_g4_seq_test_icaruscode nucosmics_detsim_seq_test_icaruscode nucosmics_reco0_seq_test_icaruscode nucosmics_reco1_seq_test_icaruscode



################################################################################
#  [4] Tests with gallery
#######################################
#  [4.1] Compilation tests
# ------------------------------------------------------------------------------
#

[test compilation_test_icaruscode]

# this test fails when run on development (MRB) area setup because the path
# to the script is not correct (before installation it is `${ICARUSCODE_DIR}/test/ci`);
# also, in ICARUS there is not such test yet
cpu_usage_range=0:120
mem_usage_range=10000:800000
script=${ICARUSCODE_DIR}/test/compileGalleryAnalysis.sh
parse_art_output=False


[suite gallery_test_icaruscode]
testlist=compilation_test_icaruscode


################################################################################
#  [5] InTime Cosmic tests
##############################
#
# These tests ultimately utilise a simulated event intime cosmic event following this workflow:
#prodcorsika_proton_intime_icarus_bnb_sce_on_ovb.fcl
#intime_g4_icarus_sce_overburden.fcl
#standard_detsim_icarus.fcl
#stage0_multiTPC_icarus_MC.fcl
#stage1_multiTPC_icarus_gauss_MC.fcl
#
#
#
#  [5.1] InTime Cosmic tests: quick tests
# ===========================================
#
# These tests are of "quick" type.
#
# The input files are reference files from the corresponding sequential test
# (`intimecosmic_XXX_seq_test_icaruscode`), except for the generator stage, where the
# input file is the same as in the sequential test.
#

[test intimecosmic_gen_quick_test_icaruscode]
STAGE_NAME=gen
NEVENTS=250

cpu_usage_range=5300:6300
mem_usage_range=300000:500000

script=%(EXPSCRIPT_ICARUSCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)sintimecosmic_%(STAGE_NAME)s_quick_test_icaruscode.fcl
OUTPUT_BASE_FILE_NAME=intimecosmic_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=%(XROOTD_BASEFILEDIR_ICARUSCODE)s/input/empty/EmptyEvents_01.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test intimecosmic_g4_quick_test_icaruscode]
STAGE_NAME=g4
INPUT_STAGE_NAME=gen
NEVENTS=2

cpu_usage_range=2300:3400
mem_usage_range=5000000:6400000

script=%(EXPSCRIPT_ICARUSCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)sintimecosmic_%(STAGE_NAME)s_quick_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=intimecosmic_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=intimecosmic_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test intimecosmic_detsim_quick_test_icaruscode]
STAGE_NAME=detsim
INPUT_STAGE_NAME=g4
NEVENTS=2

cpu_usage_range=950:1400
mem_usage_range=5900000:6800000

script=%(EXPSCRIPT_ICARUSCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)sintimecosmic_%(STAGE_NAME)s_quick_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=intimecosmic_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=intimecosmic_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test intimecosmic_reco0_quick_test_icaruscode]
STAGE_NAME=reco0
INPUT_STAGE_NAME=detsim
NEVENTS=2

cpu_usage_range=2250:2950
mem_usage_range=5600000:6600000

script=%(EXPSCRIPT_ICARUSCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)sintimecosmic_%(STAGE_NAME)s_quick_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=intimecosmic_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=intimecosmic_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s

[test intimecosmic_reco1_quick_test_icaruscode]
STAGE_NAME=reco1
INPUT_STAGE_NAME=reco0
NEVENTS=2

cpu_usage_range=1050:1550
mem_usage_range=4300000:5300000

script=%(EXPSCRIPT_ICARUSCODE)s
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)sintimecosmic_%(STAGE_NAME)s_quick_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=intimecosmic_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=intimecosmic_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(INPUT_STAGE_NAME)s/%(INPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[suite intimecosmic_quick_test_icaruscode]

testlist=intimecosmic_gen_quick_test_icaruscode intimecosmic_g4_quick_test_icaruscode intimecosmic_detsim_quick_test_icaruscode intimecosmic_reco0_quick_test_icaruscode intimecosmic_reco1_quick_test_icaruscode



##############################
#  [5.2] InTime Cosmic tests: sequential tests
# ================================================
#
# This test simulates a full "standard" simulation + reconstruction chain.
# Due to its sequential nature, this test is expected to be the longest.
# It is recommended that the whole test be kept under 10 minutes run-time
# (wall clock), 3 minutes or less recommended, not to challenge the endurance
# of the impatient tester.
#
# The resource usage upper limit has a marker feature (upper limit ending with
# `2`) just to facilitate the connection between the messages of `test_runner`
# on resource usage excess with the test that causes it (it's clearer to run it
# with `-s` option though).
#

[test intimecosmic_gen_seq_test_icaruscode]
STAGE_NAME=gen
NEVENTS=%(NEVENTS_SEQ_INTIMECOSMIC_GEN_ICARUSCODE)s

cpu_usage_range=5:52
mem_usage_range=100000:400002

script=%(EXPSCRIPT_ICARUSCODE)s

FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)sintimecosmic_%(STAGE_NAME)s_seq_test_icaruscode.fcl
OUTPUT_BASE_FILE_NAME=intimecosmic_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=%(XROOTD_BASEFILEDIR_ICARUSCODE)s/input/empty/EmptyEvents_01.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test intimecosmic_g4_seq_test_icaruscode]
STAGE_NAME=g4
INPUT_STAGE_NAME=gen
NEVENTS=%(NEVENTS_SEQ_INTIMECOSMIC_ICARUSCODE)s

cpu_usage_range=330:602
mem_usage_range=1500000:2500002

script=%(EXPSCRIPT_ICARUSCODE)s
requires=intimecosmic_%(INPUT_STAGE_NAME)s_seq_test_icaruscode
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)sintimecosmic_%(STAGE_NAME)s_seq_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=intimecosmic_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=intimecosmic_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test intimecosmic_detsim_seq_test_icaruscode]
STAGE_NAME=detsim
INPUT_STAGE_NAME=g4
NEVENTS=%(NEVENTS_SEQ_INTIMECOSMIC_ICARUSCODE)s


cpu_usage_range=80:302
mem_usage_range=200000:1000002

script=%(EXPSCRIPT_ICARUSCODE)s
requires=intimecosmic_%(INPUT_STAGE_NAME)s_seq_test_icaruscode
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)sintimecosmic_%(STAGE_NAME)s_seq_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=intimecosmic_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=intimecosmic_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s




[test intimecosmic_reco0_seq_test_icaruscode]
STAGE_NAME=reco0
INPUT_STAGE_NAME=detsim
NEVENTS=%(NEVENTS_SEQ_INTIMECOSMIC_ICARUSCODE)s


cpu_usage_range=100:402
mem_usage_range=700000:1200002

script=%(EXPSCRIPT_ICARUSCODE)s
requires=intimecosmic_%(INPUT_STAGE_NAME)s_seq_test_icaruscode
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)sintimecosmic_%(STAGE_NAME)s_seq_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=intimecosmic_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=intimecosmic_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s

[test intimecosmic_reco1_seq_test_icaruscode]
STAGE_NAME=reco1
INPUT_STAGE_NAME=reco0
NEVENTS=%(NEVENTS_SEQ_INTIMECOSMIC_ICARUSCODE)s


cpu_usage_range=100:402
mem_usage_range=700000:1200002

script=%(EXPSCRIPT_ICARUSCODE)s
requires=intimecosmic_%(INPUT_STAGE_NAME)s_seq_test_icaruscode
FHiCL_FILE=%(CI_FHICL_PREFIX_ICARUSCODE)sintimecosmic_%(STAGE_NAME)s_seq_test_icaruscode.fcl
INPUT_BASE_FILE_NAME=intimecosmic_%(INPUT_STAGE_NAME)s_test_icaruscode
OUTPUT_BASE_FILE_NAME=intimecosmic_%(STAGE_NAME)s_test_icaruscode
EXTRA_DIR=%(SINGLE_INPUT_DIRNAME_ICARUSCODE)s
INPUT_STREAM=../%(requires)s/%(INPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
OUTPUT_STREAM=%(OUTPUT_BASE_FILE_NAME)s_%(CUR_ICARUSCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_ICARUSCODE)s/%(EXTRA_DIR)s/%(STAGE_NAME)s/%(OUTPUT_BASE_FILE_NAME)s_%(REF_ICARUSCODE)s.root
TFILENAME=hist-%(OUTPUT_BASE_FILE_NAME)s.root
args=%(STDARGS_ICARUSCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s





[suite intimecosmic_seq_test_icaruscode]
testlist=intimecosmic_gen_seq_test_icaruscode intimecosmic_g4_seq_test_icaruscode intimecosmic_detsim_seq_test_icaruscode intimecosmic_reco0_seq_test_icaruscode intimecosmic_reco1_seq_test_icaruscode
#testlist=intimecosmic_gen_seq_test_icaruscode intimecosmic_g4_seq_test_icaruscode intimecosmic_detsim_seq_test_icaruscode intimecosmic_reco0_seq_test_icaruscode intimecosmic_reco1_seq_test_icaruscode

[suite generate_reference_intimecosmic_test_icaruscode]
testlist=intimecosmic_gen_seq_test_icaruscode intimecosmic_g4_seq_test_icaruscode intimecosmic_detsim_seq_test_icaruscode intimecosmic_reco0_seq_test_icaruscode intimecosmic_reco1_seq_test_icaruscode






################################################################################
#  [A] Special suite definitions for continuous integration framework (`lar_ci`)
#######################################
#  [A.1] Experiment suite definitions
# ------------------------------------------------------------------------------
#
# These test suites are defined by SBND for our own purpose
#

###
### Test suite recommended to be run by developers before every push
# 
# This suite is supposed to be "fast", returning a response in less than 10'.
# 
# Includes single particle and data-like.
# 
[suite develop_test_icaruscode]
# gallery_test_icaruscode disabled until... until we get one
# testlist=single_quick_test_icaruscode nucosmics_quick_test_icaruscode gallery_test_icaruscode
testlist=single_quick_test_icaruscode nucosmics_quick_test_icaruscode intimecosmic_quick_test_icaruscode


### 
### Test suite recommended to be run on every push, unless changes are designed
### to be localised.
# 
# A change in physics of a reconstruction algorithm is *not* localised, as it is
# not localised a change in the implementation of a reconstruction algorithm.
# Neither it is localised a change in a service or reconstruction module
# configuration.
#
[suite complete_test_icaruscode]
testlist=develop_test_icaruscode single_seq_test_icaruscode nucosmics_seq_test_icaruscode intimecosmic_seq_test_icaruscode


###
### Generate all the reference files.
#
[suite generate_reference_icaruscode]
testlist=generate_reference_single_test_icaruscode generate_reference_nucosmics_test_icaruscode generate_reference_intimecosmic_test_icaruscode

###
### All tests
#
# This suite is intended mainly to "test the tests", and may include redundant tests.
#
[suite all_tests_icaruscode]
# gallery_test_icaruscode disabled until... until we get one
# testlist=single_quick_test_icaruscode nucosmics_quick_test_icaruscode single_seq_test_icaruscode nucosmics_seq_test_icaruscode gallery_test_icaruscode
testlist=single_quick_test_icaruscode nucosmics_quick_test_icaruscode intimecosmic_quick_test_icaruscode single_seq_test_icaruscode nucosmics_seq_test_icaruscode intimecosmic_seq_test_icaruscode


#############################################################
#  [A.2] Continuous integration framework suite definitions
# -----------------------------------------------------------

# the `quick_test_<CI_EXP_CODE>` tests are run by the continuous integration default trigger
[suite quick_test_icaruscode]
testlist=develop_test_icaruscode

# the `seq_test_<CI_EXP_CODE>` tests are run by the continuous integration to generate reference files
[suite seq_test_icaruscode]
testlist=generate_reference_icaruscode

