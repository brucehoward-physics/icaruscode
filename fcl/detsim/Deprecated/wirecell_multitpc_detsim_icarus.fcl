#include "services_icarus_simulation.fcl"
#include "detsimmodules_ICARUS.fcl"
#include "opdetsim_pmt_icarus.fcl"
#include "crtsimmodules_icarus.fcl"
#include "rootoutput_icarus.fcl"

process_name: DetSim

services: {
  @table::icarus_detsim_services
  #FileCatalogMetadata:  @local::art_file_catalog_mc
} # services


physics: {

  producers: {
    crtdaq:         @local::icarus_crtsim
#    opdaq:          @local::icarus_simpmt
    opdaq:          @local::icarus_simpmt_nonoise # turn off the noise so it runs more quickly
    # daq:            @local::icarus_simwire
      daq : {
         module_type : WireCellToolkit
         wcls_main: {
            tool_type: WCLS
            apps: ["Pgrapher"]

            // logsinks: ["stdout"]
            // loglevels: ["magnify:debug"]

            plugins: ["WireCellPgraph", "WireCellGen","WireCellSio","WireCellRoot","WireCellLarsoft"]

            // needs to be found via your WIRECELL_PATH 
            configs: ["pgrapher/experiment/icarus/wcls-multitpc-sim-drift-simchannel.jsonnet"]


            // Contract note: these exact "type:name" must be used to identify
            // the configuration data structures for these components in the Jsonnet.

            inputers: ["wclsSimDepoSource:electron"]
            outputers: [
               "wclsSimChannelSink:postdrift",
               "wclsFrameSaver:simdigits0",
               "wclsFrameSaver:simdigits1",
               "wclsFrameSaver:simdigits2",
               "wclsFrameSaver:simdigits3"
            //   ,"wclsFrameSaver:nfdigits",
            //   "wclsFrameSaver:spsignals",
            //   "wclsFrameSaver:spthresholds"
            ]

            // Make available parameters via Jsonnet's std.extVar()
            params: {
            }
            structs: {
              # load values from simulationservices_icarus.fcl
              # Longitudinal diffusion constant [cm2/ns]
              DL: @local::icarus_largeantparameters.LongitudinalDiffusion

              # Transverse diffusion constant [cm2/ns]
              DT: @local::icarus_largeantparameters.TransverseDiffusion

              # load values from services_common_icarus.fcl
              # Electron lifetime [microseconds]
              lifetime: @local::icarus_detproperties.Electronlifetime

              # Electron drift speed, assumes a certain applied E-field [mm/us]
              # driftSpeed: 1.565
            }

         }
      }

    rns:            { module_type: "RandomNumberSaver" }
  } # producers
  
  simulate: [ rns, opdaq, daq, crtdaq ]
  
  # define the output stream, there could be more than one if using filters
  stream:  [ rootoutput ]

} # physics


outputs: {
  rootoutput: @local::icarus_rootoutput
}


#
# customisation
#

# we are suppressing channels with no signal in the TPC
# physics.producers.daq.SuppressNoSignal: true

